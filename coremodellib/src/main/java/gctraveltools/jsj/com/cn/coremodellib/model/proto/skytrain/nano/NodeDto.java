// Generated by the protocol buffer compiler.  DO NOT EDIT!

package gctraveltools.jsj.com.cn.coremodellib.model.proto.skytrain.nano;

@SuppressWarnings("hiding")
public final class NodeDto extends
    com.google.protobuf.nano.android.ParcelableMessageNano {

  // Used by Parcelable
  @SuppressWarnings({"unused"})
  public static final android.os.Parcelable.Creator<NodeDto> CREATOR =
      new com.google.protobuf.nano.android.ParcelableMessageNanoCreator<
          NodeDto>(NodeDto.class);

  private static volatile NodeDto[] _emptyArray;
  public static NodeDto[] emptyArray() {
    // Lazily initializes the empty array
    if (_emptyArray == null) {
      synchronized (
          com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
        if (_emptyArray == null) {
          _emptyArray = new NodeDto[0];
        }
      }
    }
    return _emptyArray;
  }

  // optional string Title = 1;
  public java.lang.String title;

  // optional string Desc = 2;
  public java.lang.String desc;

  // optional int64 TimeStamp = 3 [default = 0];
  public long timeStamp;

  // optional .NodeType NodeType = 4 [default = NodeTypeUnSetting];
  public int nodeType;

  // optional string Ext = 5;
  public java.lang.String ext;

  // optional string Icon = 6;
  public java.lang.String icon;

  public NodeDto() {
    clear();
  }

  public NodeDto clear() {
    title = "";
    desc = "";
    timeStamp = 0L;
    nodeType = gctraveltools.jsj.com.cn.coremodellib.model.proto.skytrain.nano.NodeType.NodeTypeUnSetting;
    ext = "";
    icon = "";
    cachedSize = -1;
    return this;
  }

  @Override
  public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
      throws java.io.IOException {
    if (!this.title.equals("")) {
      output.writeString(1, this.title);
    }
    if (!this.desc.equals("")) {
      output.writeString(2, this.desc);
    }
    if (this.timeStamp != 0L) {
      output.writeInt64(3, this.timeStamp);
    }
    if (this.nodeType != gctraveltools.jsj.com.cn.coremodellib.model.proto.skytrain.nano.NodeType.NodeTypeUnSetting) {
      output.writeInt32(4, this.nodeType);
    }
    if (!this.ext.equals("")) {
      output.writeString(5, this.ext);
    }
    if (!this.icon.equals("")) {
      output.writeString(6, this.icon);
    }
    super.writeTo(output);
  }

  @Override
  protected int computeSerializedSize() {
    int size = super.computeSerializedSize();
    if (!this.title.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(1, this.title);
    }
    if (!this.desc.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(2, this.desc);
    }
    if (this.timeStamp != 0L) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt64Size(3, this.timeStamp);
    }
    if (this.nodeType != gctraveltools.jsj.com.cn.coremodellib.model.proto.skytrain.nano.NodeType.NodeTypeUnSetting) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
        .computeInt32Size(4, this.nodeType);
    }
    if (!this.ext.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(5, this.ext);
    }
    if (!this.icon.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(6, this.icon);
    }
    return size;
  }

  @Override
  public NodeDto mergeFrom(
          com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    while (true) {
      int tag = input.readTag();
      switch (tag) {
        case 0:
          return this;
        default: {
          if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
            return this;
          }
          break;
        }
        case 10: {
          this.title = input.readString();
          break;
        }
        case 18: {
          this.desc = input.readString();
          break;
        }
        case 24: {
          this.timeStamp = input.readInt64();
          break;
        }
        case 32: {
          int value = input.readInt32();
          switch (value) {
            case gctraveltools.jsj.com.cn.coremodellib.model.proto.skytrain.nano.NodeType.NodeTypeUnSetting:
            case gctraveltools.jsj.com.cn.coremodellib.model.proto.skytrain.nano.NodeType.NodeTypeCancel:
            case gctraveltools.jsj.com.cn.coremodellib.model.proto.skytrain.nano.NodeType.NodeTypeSvr:
            case gctraveltools.jsj.com.cn.coremodellib.model.proto.skytrain.nano.NodeType.NodeTypeSvrVipHall:
            case gctraveltools.jsj.com.cn.coremodellib.model.proto.skytrain.nano.NodeType.NodeTypeSvrBoarding:
            case gctraveltools.jsj.com.cn.coremodellib.model.proto.skytrain.nano.NodeType.NodeTypeSvrVipChannel:
            case gctraveltools.jsj.com.cn.coremodellib.model.proto.skytrain.nano.NodeType.NodeTypeDeptAirport:
            case gctraveltools.jsj.com.cn.coremodellib.model.proto.skytrain.nano.NodeType.NodeTypeCheckIn:
            case gctraveltools.jsj.com.cn.coremodellib.model.proto.skytrain.nano.NodeType.NodeTypeGate:
            case gctraveltools.jsj.com.cn.coremodellib.model.proto.skytrain.nano.NodeType.NodeTypeFly:
            case gctraveltools.jsj.com.cn.coremodellib.model.proto.skytrain.nano.NodeType.NodeTypeLand:
            case gctraveltools.jsj.com.cn.coremodellib.model.proto.skytrain.nano.NodeType.NodeTypeBaggage:
            case gctraveltools.jsj.com.cn.coremodellib.model.proto.skytrain.nano.NodeType.NodeTypeClaims:
              this.nodeType = value;
              break;
          }
          break;
        }
        case 42: {
          this.ext = input.readString();
          break;
        }
        case 50: {
          this.icon = input.readString();
          break;
        }
      }
    }
  }

  public static NodeDto parseFrom(byte[] data)
      throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
    return com.google.protobuf.nano.MessageNano.mergeFrom(new NodeDto(), data);
  }

  public static NodeDto parseFrom(
          com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    return new NodeDto().mergeFrom(input);
  }
}
