// Generated by the protocol buffer compiler.  DO NOT EDIT!

package gctraveltools.jsj.com.cn.servers1.bean.nano;

@SuppressWarnings("hiding")
public final class TerminalServiceDto extends
    com.google.protobuf.nano.android.ParcelableMessageNano {

  // Used by Parcelable
  @SuppressWarnings({"unused"})
  public static final android.os.Parcelable.Creator<TerminalServiceDto> CREATOR =
      new com.google.protobuf.nano.android.ParcelableMessageNanoCreator<
          TerminalServiceDto>(TerminalServiceDto.class);

  private static volatile TerminalServiceDto[] _emptyArray;
  public static TerminalServiceDto[] emptyArray() {
    // Lazily initializes the empty array
    if (_emptyArray == null) {
      synchronized (
          com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
        if (_emptyArray == null) {
          _emptyArray = new TerminalServiceDto[0];
        }
      }
    }
    return _emptyArray;
  }

  // optional string AirportTerminalName = 1;
  public java.lang.String airportTerminalName;

  // repeated .VVIPHallDto VIPHallDtos = 2;
  public gctraveltools.jsj.com.cn.servers1.bean.nano.VVIPHallDto[] vIPHallDtos;

  // repeated .BoardingDto BoardingDtos = 3;
  public gctraveltools.jsj.com.cn.servers1.bean.nano.BoardingDto[] boardingDtos;

  // repeated .VipChannelDto VipChannelDtos = 4;
  public gctraveltools.jsj.com.cn.servers1.bean.nano.VipChannelDto[] vipChannelDtos;

  // repeated .VVIPHallDto VVIPHallDtos = 5;
  public gctraveltools.jsj.com.cn.servers1.bean.nano.VVIPHallDto[] vVIPHallDtos;

  // optional bool HasVipBoardingService = 6 [default = false];
  public boolean hasVipBoardingService;

  public TerminalServiceDto() {
    clear();
  }

  public TerminalServiceDto clear() {
    airportTerminalName = "";
    vIPHallDtos = gctraveltools.jsj.com.cn.servers1.bean.nano.VVIPHallDto.emptyArray();
    boardingDtos = gctraveltools.jsj.com.cn.servers1.bean.nano.BoardingDto.emptyArray();
    vipChannelDtos = gctraveltools.jsj.com.cn.servers1.bean.nano.VipChannelDto.emptyArray();
    vVIPHallDtos = gctraveltools.jsj.com.cn.servers1.bean.nano.VVIPHallDto.emptyArray();
    hasVipBoardingService = false;
    cachedSize = -1;
    return this;
  }

  @Override
  public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
      throws java.io.IOException {
    if (!this.airportTerminalName.equals("")) {
      output.writeString(1, this.airportTerminalName);
    }
    if (this.vIPHallDtos != null && this.vIPHallDtos.length > 0) {
      for (int i = 0; i < this.vIPHallDtos.length; i++) {
        gctraveltools.jsj.com.cn.servers1.bean.nano.VVIPHallDto element = this.vIPHallDtos[i];
        if (element != null) {
          output.writeMessage(2, element);
        }
      }
    }
    if (this.boardingDtos != null && this.boardingDtos.length > 0) {
      for (int i = 0; i < this.boardingDtos.length; i++) {
        gctraveltools.jsj.com.cn.servers1.bean.nano.BoardingDto element = this.boardingDtos[i];
        if (element != null) {
          output.writeMessage(3, element);
        }
      }
    }
    if (this.vipChannelDtos != null && this.vipChannelDtos.length > 0) {
      for (int i = 0; i < this.vipChannelDtos.length; i++) {
        gctraveltools.jsj.com.cn.servers1.bean.nano.VipChannelDto element = this.vipChannelDtos[i];
        if (element != null) {
          output.writeMessage(4, element);
        }
      }
    }
    if (this.vVIPHallDtos != null && this.vVIPHallDtos.length > 0) {
      for (int i = 0; i < this.vVIPHallDtos.length; i++) {
        gctraveltools.jsj.com.cn.servers1.bean.nano.VVIPHallDto element = this.vVIPHallDtos[i];
        if (element != null) {
          output.writeMessage(5, element);
        }
      }
    }
    if (this.hasVipBoardingService != false) {
      output.writeBool(6, this.hasVipBoardingService);
    }
    super.writeTo(output);
  }

  @Override
  protected int computeSerializedSize() {
    int size = super.computeSerializedSize();
    if (!this.airportTerminalName.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(1, this.airportTerminalName);
    }
    if (this.vIPHallDtos != null && this.vIPHallDtos.length > 0) {
      for (int i = 0; i < this.vIPHallDtos.length; i++) {
        gctraveltools.jsj.com.cn.servers1.bean.nano.VVIPHallDto element = this.vIPHallDtos[i];
        if (element != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(2, element);
        }
      }
    }
    if (this.boardingDtos != null && this.boardingDtos.length > 0) {
      for (int i = 0; i < this.boardingDtos.length; i++) {
        gctraveltools.jsj.com.cn.servers1.bean.nano.BoardingDto element = this.boardingDtos[i];
        if (element != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(3, element);
        }
      }
    }
    if (this.vipChannelDtos != null && this.vipChannelDtos.length > 0) {
      for (int i = 0; i < this.vipChannelDtos.length; i++) {
        gctraveltools.jsj.com.cn.servers1.bean.nano.VipChannelDto element = this.vipChannelDtos[i];
        if (element != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(4, element);
        }
      }
    }
    if (this.vVIPHallDtos != null && this.vVIPHallDtos.length > 0) {
      for (int i = 0; i < this.vVIPHallDtos.length; i++) {
        gctraveltools.jsj.com.cn.servers1.bean.nano.VVIPHallDto element = this.vVIPHallDtos[i];
        if (element != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(5, element);
        }
      }
    }
    if (this.hasVipBoardingService != false) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeBoolSize(6, this.hasVipBoardingService);
    }
    return size;
  }

  @Override
  public TerminalServiceDto mergeFrom(
          com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    while (true) {
      int tag = input.readTag();
      switch (tag) {
        case 0:
          return this;
        default: {
          if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
            return this;
          }
          break;
        }
        case 10: {
          this.airportTerminalName = input.readString();
          break;
        }
        case 18: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 18);
          int i = this.vIPHallDtos == null ? 0 : this.vIPHallDtos.length;
          gctraveltools.jsj.com.cn.servers1.bean.nano.VVIPHallDto[] newArray =
              new gctraveltools.jsj.com.cn.servers1.bean.nano.VVIPHallDto[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.vIPHallDtos, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = new gctraveltools.jsj.com.cn.servers1.bean.nano.VVIPHallDto();
            input.readMessage(newArray[i]);
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = new gctraveltools.jsj.com.cn.servers1.bean.nano.VVIPHallDto();
          input.readMessage(newArray[i]);
          this.vIPHallDtos = newArray;
          break;
        }
        case 26: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 26);
          int i = this.boardingDtos == null ? 0 : this.boardingDtos.length;
          gctraveltools.jsj.com.cn.servers1.bean.nano.BoardingDto[] newArray =
              new gctraveltools.jsj.com.cn.servers1.bean.nano.BoardingDto[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.boardingDtos, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = new gctraveltools.jsj.com.cn.servers1.bean.nano.BoardingDto();
            input.readMessage(newArray[i]);
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = new gctraveltools.jsj.com.cn.servers1.bean.nano.BoardingDto();
          input.readMessage(newArray[i]);
          this.boardingDtos = newArray;
          break;
        }
        case 34: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 34);
          int i = this.vipChannelDtos == null ? 0 : this.vipChannelDtos.length;
          gctraveltools.jsj.com.cn.servers1.bean.nano.VipChannelDto[] newArray =
              new gctraveltools.jsj.com.cn.servers1.bean.nano.VipChannelDto[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.vipChannelDtos, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = new gctraveltools.jsj.com.cn.servers1.bean.nano.VipChannelDto();
            input.readMessage(newArray[i]);
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = new gctraveltools.jsj.com.cn.servers1.bean.nano.VipChannelDto();
          input.readMessage(newArray[i]);
          this.vipChannelDtos = newArray;
          break;
        }
        case 42: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 42);
          int i = this.vVIPHallDtos == null ? 0 : this.vVIPHallDtos.length;
          gctraveltools.jsj.com.cn.servers1.bean.nano.VVIPHallDto[] newArray =
              new gctraveltools.jsj.com.cn.servers1.bean.nano.VVIPHallDto[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.vVIPHallDtos, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = new gctraveltools.jsj.com.cn.servers1.bean.nano.VVIPHallDto();
            input.readMessage(newArray[i]);
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = new gctraveltools.jsj.com.cn.servers1.bean.nano.VVIPHallDto();
          input.readMessage(newArray[i]);
          this.vVIPHallDtos = newArray;
          break;
        }
        case 48: {
          this.hasVipBoardingService = input.readBool();
          break;
        }
      }
    }
  }

  public static TerminalServiceDto parseFrom(byte[] data)
      throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
    return com.google.protobuf.nano.MessageNano.mergeFrom(new TerminalServiceDto(), data);
  }

  public static TerminalServiceDto parseFrom(
          com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    return new TerminalServiceDto().mergeFrom(input);
  }
}
