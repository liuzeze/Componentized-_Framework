// Generated by the protocol buffer compiler.  DO NOT EDIT!

package gctraveltools.jsj.com.cn.servers1.bean.nano;

@SuppressWarnings("hiding")
public final class VVIPHallDto extends
    com.google.protobuf.nano.android.ParcelableMessageNano {

  // Used by Parcelable
  @SuppressWarnings({"unused"})
  public static final android.os.Parcelable.Creator<VVIPHallDto> CREATOR =
      new com.google.protobuf.nano.android.ParcelableMessageNanoCreator<
          VVIPHallDto>(VVIPHallDto.class);

  private static volatile VVIPHallDto[] _emptyArray;
  public static VVIPHallDto[] emptyArray() {
    // Lazily initializes the empty array
    if (_emptyArray == null) {
      synchronized (
          com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
        if (_emptyArray == null) {
          _emptyArray = new VVIPHallDto[0];
        }
      }
    }
    return _emptyArray;
  }

  // optional int32 VIPHallID = 1 [default = 0];
  public int vIPHallID;

  // optional string VIPHallEncryptParam = 2;
  public java.lang.String vIPHallEncryptParam;

  // optional string VIPHallName = 3;
  public java.lang.String vIPHallName;

  // optional string Address = 4;
  public java.lang.String address;

  // optional .VIPHallServiceType VVipType = 5 [default = ServiceTypeVIPHall];
  public int vVipType;

  // optional double SalePrice = 6 [default = 0];
  public double salePrice;

  // optional string BusinessBeginHour = 7;
  public java.lang.String businessBeginHour;

  // optional string BusinessEndHour = 8;
  public java.lang.String businessEndHour;

  // optional .VIPHallType VipHallType = 9 [default = VIPHallTypeUnSetting];
  public int vipHallType;

  // optional string SecurityCheckLocation = 10;
  public java.lang.String securityCheckLocation;

  // optional string ViphallImgUri = 11;
  public java.lang.String viphallImgUri;

  // optional string AirportTerminalName = 12;
  public java.lang.String airportTerminalName;

  // repeated .MoVIPHallAuxType VIPHallAuxTypeList = 13;
  public gctraveltools.jsj.com.cn.servers1.bean.nano.MoVIPHallAuxType[] vIPHallAuxTypeList;

  // optional string ArrivalVipHallTime = 14;
  public java.lang.String arrivalVipHallTime;

  // optional string VIPHallServiceTel = 15;
  public java.lang.String vIPHallServiceTel;

  public VVIPHallDto() {
    clear();
  }

  public VVIPHallDto clear() {
    vIPHallID = 0;
    vIPHallEncryptParam = "";
    vIPHallName = "";
    address = "";
    vVipType = gctraveltools.jsj.com.cn.servers1.bean.nano.VIPHallServiceType.ServiceTypeVIPHall;
    salePrice = 0D;
    businessBeginHour = "";
    businessEndHour = "";
    vipHallType = gctraveltools.jsj.com.cn.servers1.bean.nano.VIPHallType.VIPHallTypeUnSetting;
    securityCheckLocation = "";
    viphallImgUri = "";
    airportTerminalName = "";
    vIPHallAuxTypeList = gctraveltools.jsj.com.cn.servers1.bean.nano.MoVIPHallAuxType.emptyArray();
    arrivalVipHallTime = "";
    vIPHallServiceTel = "";
    cachedSize = -1;
    return this;
  }

  @Override
  public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
      throws java.io.IOException {
    if (this.vIPHallID != 0) {
      output.writeInt32(1, this.vIPHallID);
    }
    if (!this.vIPHallEncryptParam.equals("")) {
      output.writeString(2, this.vIPHallEncryptParam);
    }
    if (!this.vIPHallName.equals("")) {
      output.writeString(3, this.vIPHallName);
    }
    if (!this.address.equals("")) {
      output.writeString(4, this.address);
    }
    if (this.vVipType != gctraveltools.jsj.com.cn.servers1.bean.nano.VIPHallServiceType.ServiceTypeVIPHall) {
      output.writeInt32(5, this.vVipType);
    }
    if (java.lang.Double.doubleToLongBits(this.salePrice)
        != java.lang.Double.doubleToLongBits(0D)) {
      output.writeDouble(6, this.salePrice);
    }
    if (!this.businessBeginHour.equals("")) {
      output.writeString(7, this.businessBeginHour);
    }
    if (!this.businessEndHour.equals("")) {
      output.writeString(8, this.businessEndHour);
    }
    if (this.vipHallType != gctraveltools.jsj.com.cn.servers1.bean.nano.VIPHallType.VIPHallTypeUnSetting) {
      output.writeInt32(9, this.vipHallType);
    }
    if (!this.securityCheckLocation.equals("")) {
      output.writeString(10, this.securityCheckLocation);
    }
    if (!this.viphallImgUri.equals("")) {
      output.writeString(11, this.viphallImgUri);
    }
    if (!this.airportTerminalName.equals("")) {
      output.writeString(12, this.airportTerminalName);
    }
    if (this.vIPHallAuxTypeList != null && this.vIPHallAuxTypeList.length > 0) {
      for (int i = 0; i < this.vIPHallAuxTypeList.length; i++) {
        gctraveltools.jsj.com.cn.servers1.bean.nano.MoVIPHallAuxType element = this.vIPHallAuxTypeList[i];
        if (element != null) {
          output.writeMessage(13, element);
        }
      }
    }
    if (!this.arrivalVipHallTime.equals("")) {
      output.writeString(14, this.arrivalVipHallTime);
    }
    if (!this.vIPHallServiceTel.equals("")) {
      output.writeString(15, this.vIPHallServiceTel);
    }
    super.writeTo(output);
  }

  @Override
  protected int computeSerializedSize() {
    int size = super.computeSerializedSize();
    if (this.vIPHallID != 0) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(1, this.vIPHallID);
    }
    if (!this.vIPHallEncryptParam.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(2, this.vIPHallEncryptParam);
    }
    if (!this.vIPHallName.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(3, this.vIPHallName);
    }
    if (!this.address.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(4, this.address);
    }
    if (this.vVipType != gctraveltools.jsj.com.cn.servers1.bean.nano.VIPHallServiceType.ServiceTypeVIPHall) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
        .computeInt32Size(5, this.vVipType);
    }
    if (java.lang.Double.doubleToLongBits(this.salePrice)
        != java.lang.Double.doubleToLongBits(0D)) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeDoubleSize(6, this.salePrice);
    }
    if (!this.businessBeginHour.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(7, this.businessBeginHour);
    }
    if (!this.businessEndHour.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(8, this.businessEndHour);
    }
    if (this.vipHallType != gctraveltools.jsj.com.cn.servers1.bean.nano.VIPHallType.VIPHallTypeUnSetting) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
        .computeInt32Size(9, this.vipHallType);
    }
    if (!this.securityCheckLocation.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(10, this.securityCheckLocation);
    }
    if (!this.viphallImgUri.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(11, this.viphallImgUri);
    }
    if (!this.airportTerminalName.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(12, this.airportTerminalName);
    }
    if (this.vIPHallAuxTypeList != null && this.vIPHallAuxTypeList.length > 0) {
      for (int i = 0; i < this.vIPHallAuxTypeList.length; i++) {
        gctraveltools.jsj.com.cn.servers1.bean.nano.MoVIPHallAuxType element = this.vIPHallAuxTypeList[i];
        if (element != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(13, element);
        }
      }
    }
    if (!this.arrivalVipHallTime.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(14, this.arrivalVipHallTime);
    }
    if (!this.vIPHallServiceTel.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(15, this.vIPHallServiceTel);
    }
    return size;
  }

  @Override
  public VVIPHallDto mergeFrom(
          com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    while (true) {
      int tag = input.readTag();
      switch (tag) {
        case 0:
          return this;
        default: {
          if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
            return this;
          }
          break;
        }
        case 8: {
          this.vIPHallID = input.readInt32();
          break;
        }
        case 18: {
          this.vIPHallEncryptParam = input.readString();
          break;
        }
        case 26: {
          this.vIPHallName = input.readString();
          break;
        }
        case 34: {
          this.address = input.readString();
          break;
        }
        case 40: {
          int value = input.readInt32();
          switch (value) {
            case gctraveltools.jsj.com.cn.servers1.bean.nano.VIPHallServiceType.ServiceTypeVIPHall:
            case gctraveltools.jsj.com.cn.servers1.bean.nano.VIPHallServiceType.ServiceTypeSendAirport:
            case gctraveltools.jsj.com.cn.servers1.bean.nano.VIPHallServiceType.ServiceTypePickAirport:
              this.vVipType = value;
              break;
          }
          break;
        }
        case 49: {
          this.salePrice = input.readDouble();
          break;
        }
        case 58: {
          this.businessBeginHour = input.readString();
          break;
        }
        case 66: {
          this.businessEndHour = input.readString();
          break;
        }
        case 72: {
          int value = input.readInt32();
          switch (value) {
            case gctraveltools.jsj.com.cn.servers1.bean.nano.VIPHallType.VIPHallTypeUnSetting:
            case gctraveltools.jsj.com.cn.servers1.bean.nano.VIPHallType.VIPHallTypeSelf:
            case gctraveltools.jsj.com.cn.servers1.bean.nano.VIPHallType.VIPHallTypePartner:
            case gctraveltools.jsj.com.cn.servers1.bean.nano.VIPHallType.VIPHallTypeVvip:
              this.vipHallType = value;
              break;
          }
          break;
        }
        case 82: {
          this.securityCheckLocation = input.readString();
          break;
        }
        case 90: {
          this.viphallImgUri = input.readString();
          break;
        }
        case 98: {
          this.airportTerminalName = input.readString();
          break;
        }
        case 106: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 106);
          int i = this.vIPHallAuxTypeList == null ? 0 : this.vIPHallAuxTypeList.length;
          gctraveltools.jsj.com.cn.servers1.bean.nano.MoVIPHallAuxType[] newArray =
              new gctraveltools.jsj.com.cn.servers1.bean.nano.MoVIPHallAuxType[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.vIPHallAuxTypeList, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = new gctraveltools.jsj.com.cn.servers1.bean.nano.MoVIPHallAuxType();
            input.readMessage(newArray[i]);
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = new gctraveltools.jsj.com.cn.servers1.bean.nano.MoVIPHallAuxType();
          input.readMessage(newArray[i]);
          this.vIPHallAuxTypeList = newArray;
          break;
        }
        case 114: {
          this.arrivalVipHallTime = input.readString();
          break;
        }
        case 122: {
          this.vIPHallServiceTel = input.readString();
          break;
        }
      }
    }
  }

  public static VVIPHallDto parseFrom(byte[] data)
      throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
    return com.google.protobuf.nano.MessageNano.mergeFrom(new VVIPHallDto(), data);
  }

  public static VVIPHallDto parseFrom(
          com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    return new VVIPHallDto().mergeFrom(input);
  }
}
